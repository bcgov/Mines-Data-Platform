name: 'Terraform'

on:
  push:
    branches: [ "main", "staging" ]
  pull_request:

permissions:
  contents: write  # Required if Terraform needs to update state files or perform actions

jobs:
  terraform:
    name: 'Deployment'
    runs-on: ubuntu-latest
    environment: test

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Terrascan Install
      # env: 
      #   ENVIRONMENT: ${{ vars.TF_VAR_ENVIRONMENT }}
      #   RESOURCE_GROUP_NAME: ${{ vars.UNMANAGED_RG }}
      #   STORAGE_ACCOUNT_NAME: ${{ vars.UNMANAGED_STORAGE_TFSTATE }}
      #   CONTAINER_NAME: tfstate
      #   SUBSCRIPTION_ID: ${{ vars.TF_VAR_SUBSCRIPTION_ID }}
        
      run: |
        curl --location https://github.com/accurics/terrascan/releases/download/v1.3.1/terrascan_1.3.1_Linux_x86_64.tar.gz --output terrascan.tar.gz
        tar -xvf terrascan.tar.gz
        sudo install terrascan /usr/local/bin

    - name: Run Terrascan
      run: terrascan scan -t azure -i terraform --output json > terrascan_report.json

    - name: Fail if Violations Found
      run: |
        violations=$(jq '.violations | length' terrascan_report.json)
        if [ "$violations" -gt 0 ]; then
          echo "❌ Security violations found: $violations"
          exit 1
        else
          echo "✅ No violations found."
        fi

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: false

    - name: Set Azure Service Principal Environment Variables
      run: |
        echo "ARM_CLIENT_ID=${{ secrets.SERVICE_PRINCIPAL_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ vars.TF_VAR_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ vars.TF_VAR_TENANT_ID }}" >> $GITHUB_ENV
  
    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v3.1.2

    - name: Shell Script - Create Backend
      env: 
        ENVIRONMENT: ${{ vars.TF_VAR_ENVIRONMENT }}
        RESOURCE_GROUP_NAME: ${{ vars.UNMANAGED_RG }}
        STORAGE_ACCOUNT_NAME: ${{ vars.UNMANAGED_STORAGE_TFSTATE }}
        CONTAINER_NAME: tfstate
        SUBSCRIPTION_ID: ${{ vars.TF_VAR_SUBSCRIPTION_ID }}
        
      run: |
        pwd
        chmod +x createbackend.sh
        ./createbackend.sh test
      working-directory: terraform/scripts

        
    - name: Terraform Init
      run: terraform init -backend-config="environments/test/backend.conf"
      working-directory: ./terraform

    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ./terraform

    - name: Terraform Plan
      env:
        TF_VAR_LICENSEPLATE: ${{ vars.TF_VAR_LICENSEPLATE }}
        TF_VAR_LOCATION: ${{ vars.TF_VAR_LOCATION }}
        TF_VAR_LOCATIONABBR: ${{ vars.TF_VAR_LOCATIONABBR }}
        TF_VAR_subnet_names: ${{ vars.TF_VAR_SUBNET_NAMES }}
        TF_VAR_tenant_id: ${{ vars.TF_VAR_TENANT_ID }}
        TF_VAR_TAGS: ${{ vars.TF_VAR_TAGS }}
        TF_VAR_JUMPBOX_SKU: ${{ vars.TF_VAR_JUMPBOX_SKU }}
        TF_VAR_environment: ${{ vars.TF_VAR_ENVIRONMENT }}
        service_principal_id: ${{ secrets.service_principal_id }}
        TF_VAR_subscription_id: ${{ vars.TF_VAR_SUBSCRIPTION_ID }}
        TF_VAR_address_space: ${{ secrets.ADDRESS_SPACE }}

      run: terraform plan -input=false 
      working-directory: ./terraform

    # Uncomment and adjust conditions for apply if needed
    - name: Terraform Apply
      if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
      working-directory: ./terraform
